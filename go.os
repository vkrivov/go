// Свойства, которые описаны в файле настроек, их можно и нужно изменять
Перем Настройки;

// Свойства, которые не предполагается изменять
Перем ФиксированныеНастройки;

// Произвольные переменные уровня модуля
Перем ОбщиеПеременные;

// Список баз данных, перечисленных в файле настроек
Перем БазыДанных;

Процедура Инициализировать()
	
	// Ряд настроек не должен изменяться
	ФиксированныеНастройки = Новый Структура("");

	ФиксированныеНастройки.Вставить("ФайлСписокОбъектов",		"список объектов.ini");
	ФиксированныеНастройки.Вставить("ФайлНастройки",			"настройки.ini");

	ФиксированныеНастройки.Вставить("КаталогGit",				"git");
	ФиксированныеНастройки.Вставить("КаталогScanner",			"sonar");
	ФиксированныеНастройки.Вставить("КаталогLogs",				"logs");
	
	ФиксированныеНастройки.Вставить("МаркерКаталогИБ",			"Каталог:");
	ФиксированныеНастройки.Вставить("МаркерСтрокаСоединения",	"Строка соединения:");
	
	// Настройки конкретного экземпляра проекта задаются в файле, указанном в свойстве ФайлНастройки
	//  в виде НазваниеНастройки: ЗначениеНастройки
	// Здесь они переписываются в структуру
	Настройки = Новый Структура();

	ФайлНастройки = ОбъединитьПути(
		ТекущийКаталог(), 
		ФиксированныеНастройки.ФайлНастройки);

	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Прочитать(ФайлНастройки);
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
	Для НомерСтроки = 1 По КоличествоСтрок Цикл

		ИсходнаяСтрока = СокрЛП(ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки));

		Если ИсходнаяСтрока = "" Тогда
			Продолжить;
		КонецЕсли;

		Если Лев(ИсходнаяСтрока, 1) = "#" Тогда
			Продолжить;
		КонецЕсли;

		Массив = СтрРазделить(ИсходнаяСтрока, ":", Ложь);
		Если Массив.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		НазваниеНастройки = Массив.Получить(0);
		Массив.Удалить(0);
		ЗначениеНастройки = СокрЛП(СтрСоединить(Массив));

		Настройки.Вставить(НазваниеНастройки, ЗначениеНастройки);

	КонецЦикла;

	ОбщиеПеременные = Новый Структура();
	ОбщиеПеременные.Вставить("АргументыКоманднойСтроки",	Новый Массив());
	ОбщиеПеременные.Вставить("КомментарийККоммиту",			"");

	БазыДанных = Новый Массив();
	
КонецПроцедуры

// Формирует список свойств, связанных с базой данных
//
// Возвращаемое значение:
//   Структура   - Свойства базы
//
Функция НовыйОписаниеБазы()

	Структура = Новый Структура();
	Структура.Вставить("Каталог",			"");
	Структура.Вставить("СтрокаСоединения",	"");
	Структура.Вставить("СписокОбъекты",		Новый Массив());
	Структура.Вставить("СписокОбработки",	Новый Массив());
	Возврат Структура; 
	
КонецФункции


// На основании текстового файла, в котором указан список объектов для выгрузки, 
// формирует список объектов во внутреннем формате 
//
Процедура ПодготовитьСпискиОбъектов()

	ФайлСписокОбъектов = ОбъединитьПути(
		ТекущийКаталог(), 
		ФиксированныеНастройки.ФайлСписокОбъектов);

	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Прочитать(ФайлСписокОбъектов);
	ОбластьОткрыта = Ложь;

	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
	Для НомерСтроки = 1 По КоличествоСтрок Цикл

		ИсходнаяСтрока = СокрЛП(ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки));

		Если ИсходнаяСтрока = "" Тогда
			Продолжить;
		КонецЕсли;

		Если Лев(ИсходнаяСтрока, 1) = "#" Тогда
			Продолжить;
		КонецЕсли;

		Если ИсходнаяСтрока = "[" Тогда
			ОбластьОткрыта = Истина;
			Продолжить;
		КонецЕсли;

		Если ИсходнаяСтрока = "]" Тогда
			ОбластьОткрыта = Ложь;
			Продолжить;
		КонецЕсли;

		Если СтрНачинаетсяС(ИсходнаяСтрока, ФиксированныеНастройки.МаркерКаталогИБ) Тогда
			Каталог = Сред(ИсходнаяСтрока, СтрДлина(ФиксированныеНастройки.МаркерКаталогИБ) + 2);
			Продолжить;
		КонецЕсли;

		Если СтрНачинаетсяС(ИсходнаяСтрока, ФиксированныеНастройки.МаркерСтрокаСоединения) Тогда
			СтрокаСоединения = Сред(ИсходнаяСтрока, СтрДлина(ФиксированныеНастройки.МаркерСтрокаСоединения) + 2);
			Продолжить;
		КонецЕсли;

		// Новую базу будем вставлять в начало, 
		//  таким образом мы будем уверены, что индекс текущей базы всегда 0
		Если Каталог <> "" И СтрокаСоединения <> "" Тогда
			БазыДанных.Вставить(0, НовыйОписаниеБазы());
			БазыДанных[0].Каталог = Каталог;
			БазыДанных[0].СтрокаСоединения = СтрокаСоединения;
			Название = "";
			СтрокаСоединения = "";
		КонецЕсли;

		ВозможноеРасширениеФайла = НРег(Прав(ИсходнаяСтрока, 4));
		ЭтоВнешняяОбработка = ВозможноеРасширениеФайла = ".epf" Или ВозможноеРасширениеФайла = ".erf";

		Если ОбластьОткрыта Тогда
			Если ЭтоВнешняяОбработка Тогда
				БазыДанных[0].СписокОбработки.Добавить(ВозможноеРасширениеФайла + ИсходнаяСтрока);
			Иначе
				БазыДанных[0].СписокОбъекты.Добавить(ИсходнаяСтрока);
			КонецЕсли;
			Продолжить;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция СтрокаВКавычках(ИсходноеЗначение)

	Возврат """" + Строка(ИсходноеЗначение) + """";

КонецФункции

// Выгружает ранее определённый список объектов конфигурации, внешних обработок и отчётов в файлы
// 
Процедура ВыгрузитьОбъектыВФайлы()

	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел();
	Постфикс = Строка(ГенераторСлучайныхЧисел.СлучайноеЧисло(100000000, 199999999));

	КаталогВременныхФайлов = КаталогВременныхФайлов();
	КаталогВременныхФайлов = ОбъединитьПути(
		КаталогВременныхФайлов, 
		"bsl-objects-" + Постфикс);

	КаталогВременныхФайловОбработок = ОбъединитьПути(
		КаталогВременныхФайлов,
		"ext");

	СоздатьКаталог(КаталогВременныхФайловОбработок);

	ТекущийКаталог = ТекущийКаталог();

	Для каждого СвойстваБД Из БазыДанных Цикл

		// Определим полные пути к нужным каталогам и файлам, а также создадим данные каталоги
		// Каждая база будет выгружаться в свой каталог, чтобы избежать конфликта названий объектов
		ФайлСписокОбъектовДляКоманднойСтроки = ОбъединитьПути(
			КаталогВременныхФайлов,
			СвойстваБД.Каталог + ".list");
		
		// Файл со списком объектов для использоваия в командной строке
		ЗаписьТекста = Новый ЗаписьТекста(ФайлСписокОбъектовДляКоманднойСтроки, КодировкаТекста.UTF8);
		Для каждого Объект Из СвойстваБД.СписокОбъекты Цикл
			ЗаписьТекста.ЗаписатьСтроку(Объект);
		КонецЦикла;
		ЗаписьТекста.Закрыть();
		
		// Каталог для Git
		КаталогGitТекущейБазы = ОбъединитьПути(
			ТекущийКаталог, 
			ФиксированныеНастройки.КаталогGit, 
			СвойстваБД.Каталог);
		СоздатьКаталог(КаталогGitТекущейБазы);

		// Каталог для Sonar Scanner
		КаталогSonarТекущейБазы = ОбъединитьПути(
			ТекущийКаталог, 
			ФиксированныеНастройки.КаталогScanner, 
			СвойстваБД.Каталог);
		СоздатьКаталог(КаталогSonarТекущейБазы);

		// Лог 1С
		ФайлЛог = ОбъединитьПути(
			ТекущийКаталог, 
			ФиксированныеНастройки.КаталогLogs, 
			"DumpConfigToFiles.log");

		// Цитата из документации 1С:
		// "Передавая строку соединения в качестве параметра командной строки, нужно помнить о том, 
		//  что строка соединения содержит кавычки. Поэтому требуется взять всю строку в кавычки, 
		//  а содержащиеся внутри кавычки удвоить"
		СтрокаСоединения = СтрЗаменить(СвойстваБД.СтрокаСоединения, """", """""");
		
		// Выгрузка объектов конфигурации

		ВыгрузкаКонфигурацииШаблон = "
			|%1
			| DESIGNER
			| /DisableStartupMessages
			| /DisableStartupDialogs
			| /IBConnectionString %2
			| /DumpConfigToFiles %3 -listFile %4
			| -Format Plain
			| /Out %5 -NoTruncate";
	
		СтрокаЗапуска = СтрШаблон(
			ВыгрузкаКонфигурацииШаблон,
			СтрокаВКавычках(Настройки.ПлатформаПолныйПуть),
			СтрокаВКавычках(СтрокаСоединения),
			СтрокаВКавычках(КаталогGitТекущейБазы),
			СтрокаВКавычках(ФайлСписокОбъектовДляКоманднойСтроки),
			СтрокаВКавычках(ФайлЛог));

		СтрокаЗапуска = СтрЗаменить(СтрокаЗапуска, Символы.ПС, "");

		ЗапуститьПриложение(СтрокаЗапуска, ТекущийКаталог, Истина);

		// Выгрузка внешних обработок и отчётов
		// Выгрузка производится в один и тот же временный каталог,
		//  а затем полученные файы переносятся в каталог Git текущей базы,
		//  при этом расширение добавляется к имени файла
		Для каждого Обработка Из СвойстваБД.СписокОбработки Цикл

			УдалитьФайлы(КаталогВременныхФайловОбработок, ПолучитьМаскуВсеФайлы());

			Расширение = НРег(Сред(Обработка, 2, 3));
			ФайлОбработки = Сред(Обработка, 5);

			// Лог 1С
			ФайлЛог = ОбъединитьПути(
				ТекущийКаталог, 
				ФиксированныеНастройки.КаталогLogs, 
				"DumpExternalDataProcessorOrReportToFiles.log");

			ВыгрузкаКонфигурацииШаблон = "
			|%1
			| DESIGNER
			| /DisableStartupMessages
			| /DisableStartupDialogs
			| /IBConnectionString %2
			| /DumpExternalDataProcessorOrReportToFiles %3 %4
			| -Format Plain
			| /Out %5 -NoTruncate";			

			СтрокаЗапуска = СтрШаблон(
				ВыгрузкаКонфигурацииШаблон,
				СтрокаВКавычках(Настройки.ПлатформаПолныйПуть),
				СтрокаВКавычках(СтрокаСоединения),
				СтрокаВКавычках(КаталогВременныхФайловОбработок),
				СтрокаВКавычках(ФайлОбработки),
				СтрокаВКавычках(ФайлЛог));
		
			СтрокаЗапуска = СтрЗаменить(СтрокаЗапуска, Символы.ПС, "");

			ЗапуститьПриложение(СтрокаЗапуска, ТекущийКаталог, Истина);

			// Список файлов, выгруженных для текущей обработки
			Список = НайтиФайлы(КаталогВременныхФайловОбработок, ПолучитьМаскуВсеФайлы(), Истина);
			
			Для каждого Файл Из Список Цикл

				ФайлИсточник = Файл.ПолноеИмя;

				ФайлПриемник = ОбъединитьПути(
					КаталогGitТекущейБазы,
					Расширение + "." + Файл.Имя);

				КопироватьФайл(ФайлИсточник, ФайлПриемник);

			КонецЦикла; // Для каждого Файл Из Список Цикл

		КонецЦикла; // Для каждого Обработка Из СвойстваБД.СписокОбработки Цикл

		
		// Все файлы выгружены и находятся в каталоге git
		// Файлы для сканера должны находится в каталоге sonar
		// При линейном способе выгрузки (-Format Plain) модули имеют расширение txt,
		//  чтобы сканер их увидел, нужно сменить расширение на bsl
		Список = НайтиФайлы(КаталогGitТекущейБазы, "*.txt", Истина);
			
		Для каждого Файл Из Список Цикл

			ФайлИсточник = Файл.ПолноеИмя;
			
			ФайлПриемник = ОбъединитьПути(
				КаталогSonarТекущейБазы,
				Файл.ИмяБезРасширения + ".bsl");

			КопироватьФайл(ФайлИсточник, ФайлПриемник);

		КонецЦикла; // Для каждого Файл Из Список Цикл

	КонецЦикла; // Для каждого СвойстваБД Из БазыДанных Цикл

	УдалитьФайлы(КаталогВременныхФайлов);

КонецПроцедуры

Процедура РазобратьКоманднуюСтроку()

	Комментарий = "";

	// Если аргумент в командной строке предваряется "-", то это именно аргумент,
	//  все остальные аргументы склеиваются в строку, которая будет комментарием к коммиту
	Для каждого Аргумент Из АргументыКоманднойСтроки Цикл

		Если СтрНачинаетсяС(Аргумент, "-") Тогда
			ОбщиеПеременные.АргументыКоманднойСтроки.Добавить(Сред(Аргумент, 2));
		Иначе
			Комментарий = Комментарий + " " + Аргумент;
		КонецЕсли;

	КонецЦикла;

	Если СтрДлина(Комментарий) > 0 Тогда
		Комментарий = Сред(Комментарий, 2);
	КонецЕсли;

	// При желании можно указать, что комментарий запрашивать не нужно ("nc" - no comments),
	Если ОбщиеПеременные.АргументыКоманднойСтроки.Найти("nc") <> Неопределено Тогда
		Комментарий = "" + ТекущаяДата() + ", комментарий сформирован автоматически.";
	Иначе
		// Если комментарий вообще не задан, это не очень хорошо, поэтому на всякий случай спросим ещё раз
		Если Комментарий = "" Тогда
			ВвестиСтроку(Комментарий, "Комментарий к коммиту: ");
		КонецЕсли;
	КонецЕсли;

	ОбщиеПеременные.КомментарийККоммиту = Комментарий;
		
КонецПроцедуры

// Производятся необходимые опреации с Git 
//  поскольку в настоящее время script работает с локальным ропозиторием, 
//  то это только add и commit, push не выполняется
Процедура Коммит()

	КаталогGit = ОбъединитьПути(
		ТекущийКаталог(),	
		"git");

	СтрокаЗапуска = "git add .";
	
	ЗапуститьПриложение(СтрокаЗапуска, КаталогGit, Истина);
	
	СтрокаЗапускаШаблон = "git commit -m %1";
	
	СтрокаЗапуска = СтрШаблон(
		СтрокаЗапускаШаблон,
		СтрокаВКавычках(ОбщиеПеременные.КомментарийККоммиту));
	
	ЗапуститьПриложение(СтрокаЗапуска, КаталогGit, Истина);

КонецПроцедуры

// Запуск Sonar Scanner
//
Процедура Скан()

	КаталогSonar = ОбъединитьПути(
		ТекущийКаталог(),	
		"sonar");

	СтрокаЗапускаШаблон = "
		|%1
		| -Dsonar.projectKey=%2
		| -Dsonar.sources=%3
		| -Dsonar.host.url=%4
		| -Dsonar.token=%5";

	СтрокаЗапуска = СтрШаблон(
		СтрокаЗапускаШаблон,
		СтрокаВКавычках(Настройки.SonarScanner),
		СтрокаВКавычках(Настройки.SonarProjectKey),
		СтрокаВКавычках(Настройки.SonarSources),
		СтрокаВКавычках(Настройки.SonarHostURL),
		СтрокаВКавычках(Настройки.SonarToken));

	СтрокаЗапуска = СтрЗаменить(СтрокаЗапуска, Символы.ПС, "");

	ЗапуститьПриложение(СтрокаЗапуска, КаталогSonar, Истина);

КонецПроцедуры

Инициализировать();
РазобратьКоманднуюСтроку();
ПодготовитьСпискиОбъектов();
ВыгрузитьОбъектыВФайлы();
Коммит();
//Скан();
